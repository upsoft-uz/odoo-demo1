version: '3.8'

networks:
  backend:

services:
  db:
    image: postgres:15
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=postgres
    volumes:
      - db-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks: [backend]
    restart: unless-stopped

  odoo:
    image: odoo:19
    depends_on:
      db:
        condition: service_healthy
    environment:
      - HOST=db            # ðŸ‘ˆ use service name, resolves via Docker DNS
      - PORT=${DB_PORT}
      - USER=${DB_USER}
      - PASSWORD=${DB_PASSWORD}
    volumes:
      - odoo-data:/var/lib/odoo
      - ./config:/etc/odoo
      - ./enterprise-addons:/mnt/enterprise-addons
      - ./custom-addons:/mnt/custom-addons
    networks: [backend]
    restart: unless-stopped

volumes:
  odoo-data:
  db-data:


# version: '3.8'

# services:
#   odoo:
#     image: odoo:19
#     container_name: odoo-app
#     depends_on:
#       - db
#     volumes:
#       - odoo-data:/var/lib/odoo
#       - ./config:/etc/odoo
#       - ./enterprise-addons:/mnt/enterprise-addons
#       - ./custom-addons:/mnt/custom-addons
#     # Dokploy's network and labels will be added in the UI
#     # We use environment variables for the database connection
#     environment:
#       - HOST=$DB_HOST
#       - USER=$DB_USER
#       - PASSWORD=$DB_PASSWORD
#       - PORT=$DB_PORT
#     restart: unless-stopped

#   db:
#     image: postgres:15
#     container_name: odoo-db
#     # We use Dokploy's environment tab for these
#     environment:
#       - POSTGRES_USER=$DB_USER
#       - POSTGRES_PASSWORD=$DB_PASSWORD
#       - POSTGRES_DB=postgres
#     volumes:
#       - db-data:/var/lib/postgresql/data
#     restart: unless-stopped

# volumes:
#   odoo-data:
#   db-data: